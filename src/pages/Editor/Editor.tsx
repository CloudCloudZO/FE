import React, { useRef, useState, useEffect } from "react";
import "./Editor.scss";
import Question from "../../components/Editor/question";
import Output from "../../components/Editor/output";
import CodeEditor from "../../components/Editor/codeEditor";
import { useRun } from "../../hooks/useRun";

const Editor: React.FC = () => {
    const editorRef = useRef<any>(null);
    const [problemId, setProblemId] = useState<number | null>(null);
    const { runCode } = useRun();
    const [output, setOutput] = useState<string>("");
    const [message, setMessage] = useState<string>("");

    const saveCodeToLocalStorage = () => {
        if (editorRef.current) {
            const code = editorRef.current.getValue()?.trim();
            if (code) {
                localStorage.setItem("code", code); // ÏΩîÎìú Ï†ÄÏû•
                console.log("üóÑÔ∏è Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê ÏΩîÎìú Ï†ÄÏû•:", code);
            }
        }
    };

    const handleCodeEditorMount = (editor: any) => {
        editorRef.current = editor;
    };

    const handleProblemLoad = (id: number) => {
        setProblemId(id);
        localStorage.setItem("problemId", id.toString());
    };

    const handleRun = async () => {
        if (!editorRef.current) {
            alert("ÏΩîÎìú Ìé∏ÏßëÍ∏∞Í∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
            return;
        }

        if (problemId === null) {
            alert("Î¨∏Ï†ú IDÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.");
            return;
        }

        const code = editorRef.current.getValue()?.trim();

        if (!code) {
            alert("ÏΩîÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        console.log("üì° ÏΩîÎìú Ïã§Ìñâ ÏöîÏ≤≠:", {
            code,
            problemId,
            language: "python",
        });

        const result = await runCode({ code, problemId, language: "python" });
        setOutput(result.extractedResults);
        setMessage(result.message);
    };

    useEffect(() => {
        const interval = setInterval(saveCodeToLocalStorage, 5000);
        return () => clearInterval(interval);
    }, []);

    return (
        <div className="content">
            <div className="question-content">
                <Question onProblemLoad={handleProblemLoad} />
            </div>
            <div className="editor-content">
                {problemId !== null ? (
                    <CodeEditor
                        onMount={handleCodeEditorMount}
                        problemId={problemId}
                    />
                ) : (
                    <div className="editor-placeholder">
                        Î¨∏Ï†úÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.
                    </div>
                )}
                <Output onRun={handleRun} output={output} message={message} />
            </div>
        </div>
    );
};

export default Editor;
